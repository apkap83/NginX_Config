# yum groupinstall "Development Tools"
# yum install pcre pcre-devel zlib zlib-devel openssl openssl-devel
# yum install php-fpm
# yum install epel-release
# nginx -V
# nginx version: nginx/1.23.1
# built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) 
# built with OpenSSL 1.0.2k-fips  26 Jan 2017
# TLS SNI support enabled
# configure arguments: 
# --sbin-path=/usr/bin/nginx 
# --conf-path=/etc/nginx/nginx.conf 
# --error-log-path=/var/log/nginx/error.log 
# --http-log-path=/var/log/nginx/access.log 
# --with-pcre --pid-path=/var/run/nginx.pid
# --with-http_ssl_module 
# --with-http_image_filter_module=dynamic 
# --modules-path=/etc/nginx/modules 
# --with-http_v2_module
# --without-http-autoindex_module

# Load Custom NGINX config
# nginx -c /etc/nginx/nginx_custom_load_balancer.conf

# Reload Custom NGINX config
# nginx -c /etc/nginx/nginx_custom_load_balancer.conf -s reload

# Send curl requests every 0.5 sec
# while sleep 0.5; do curl http://localhost:8888; done

# yum install httpd-tools -> in order to use command: htpasswd -c /etc/nginx/.htpasswd user1


# Load Testing Rails Apps with Apache Bench, Siege, and JMeter
# https://work.stevegrossi.com/2015/02/07/load-testing-rails-apps-with-apache-bench-siege-and-jmeter/

# Apache Bench
# ab -n 100 -c 10 -l http://beta.stevegrossi.com/on

# nghttp2 Example -> Like Browser's Network Tab in Developer Tools
# nghttp -nys https://10.10.18.122/index.html
# nghttp -nysa https://10.10.18.122/index.html

# Siege Example - 
# siege -v -r 2 -c 5 https://10.10.18.122/thumb.png

# Generate SSL Key
# openssl req -x509 -days 100000 -nodes -newkey rsa:2048 -keyout /etc/nginx/ssl/self.key -out /etc/nginx/ssl/self.crt

# PHP Listener on specific Port and index file
# php -S localhost:9999 show_request.php 

# cat show_request.php 
# <?php

#echo 'Path: ' . $_SERVER['REQUEST_URI']; # Return Request URI

# if (!function_exists('getallheaders')) {
            # function getallheaders() {
                # $headers = [];
                # foreach ($_SERVER as $name => $value) {
                    # if (substr($name, 0, 5) == 'HTTP_') {
                        # $headers[str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($n
# ame, 5)))))] = $value;
                    # }
                # }
                # return $headers;
            # }
        # }

# var_dump(getallheaders());  # Return request headers;

# ?>

worker_processes auto;

# Load dynamic module
# load_module ngx_http_image_filter_module.so;

events {
	worker_connections 1024; # ulimit -n
}

http {

	include mime.types;
	server_tokens off; # Disable NGINX version in the responses
	
	# Define limit zone
	limit_req_zone $binary_remote_addr zone=MYZONE_BinRemAddr:10m rate=1r/s;	# Zone that limits to 1 request per sec per Remote Address
	limit_req_zone $request_uri zone=MYZONE_ReqURI:10m rate=1r/s;            	# Zone that limits to 1 request per sec per Request URI
	
	# Configure microcache (fastcgi)
	fastcgi_cache_path /tmp/nginx_cache levels=1:2 keys_zone=ZONE_1:100m inactive=60m;
	fastcgi_cache_key "$scheme$request_method$host$request_uri";
	add_header X-Cache $upstream_cache_status;
	
	gzip on;
	gzip_comp_level 3;
	gzip_types text/css;
	gzip_types text/javascript;

	# Redirect all traffic to HTTPS
	server {
		listen 80;
		server_name 0.0.0.0;
		return 301 https://$host$request_uri;
	}


	server {
		listen 443 ssl http2;
		server_name 10.10.18.122;
		root /sites/demo;
		index index.html index.php;
		
		location = / {
			limit_req zone=MYZONE_BinRemAddr burst=3;	# Limit requests
			# limit_req zone=MYZONE_ReqURI;	# Limit requests
		}
		
		# NGINX Directory Index Listing - If the default installation package 'http-autoindex_module' is installed
		location /mydir/ {
			autoindex on;
			
			autoindex_exact_size on;
			autoindex_format html;
			autoindex_localtime on;
			
			# Force Download of Listed Files
			add_header Content-disposition "attachment; filename=$1";
			default_type application/octet-stream;
		}
		
		ssl_certificate /etc/nginx/ssl/self.crt;
		ssl_certificate_key /etc/nginx/ssl/self.key;
		
		# Disable SSL
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

		# Optimise cipher suits
		ssl_prefer_server_ciphers on;
		ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
	
		# Enable DH Params - Perfect secrecy between key exchange: # openssl dhparam 2048 -out /etc/nginx/ssl/dhparam.pem
		ssl_dhparam /etc/nginx/ssl/dhparam.pem;
		
		# Enable HSTS - Strict Transport Security
		add_header Strict-Transport-Security "max-age=31436000" always;
	
		# SSL Sessions Cache
		ssl_session_cache shared:SSL:40m;
		ssl_session_timeout 4h;
		ssl_session_tickets on;
	
		# HTTP2 Push Directives
		# location = /index.html {
			# http2_push /style.css;
			# http2_push /thumb.png;
		# }
		
		# Basic Authentication
		# location / {
			# auth_basic "Secure Area";
			# auth_basic_user_file /etc/nginx/.htpasswd;
			# try_files $uri $uri/ =404;
		# }
		
		# NGINX Security Hardening
		add_header X-Frame-Options "SAMEORIGIN";  			# Disable Framing using <iframe> of your site
		add_header X-XSS-Protection "1; mode=block";		# Enable XSS Protection
	}
	
	
	server {
		listen 80;
		server_name 10.10.18.122;
		root /sites/demo;
		index index.html index.php;
		
		# Cache by default
		set $no_cache 0;
		
		# Check for cache bypass
		if ($arg_skipcache = 1) {
			set $no_cache 1;
		}
		
		location / {
			limit_req zone=MYZONE_BinRemAddr;					# Limit requests
			# limit_req zone=MYZONE_BinRemAddr burst=5; 		# Burst 5 means a buffer accepts the request and responds within limit again
			# limit_req zone=MYZONE_BinRemAddr burst=5 nodelay; # Burst 5 nodelay means a buffer accepts the request and responds within limit again
			try_files $uri $uri/ =404;
		}
		
		# Instruct browser to cache css, js, jpg, png files for 60 minutes
		location ~* \.(css|js|jpg|png)$ {
			add_header my_new_header "Hello World!";
			
			access_log off;
			
			# Expire headers with duration 60 minutes
			add_header Cache-Control public;
			add_header Pragma public;
			add_header Vary Accept_Encoding;
			expires 60m;
		}
		
		location ~ \.php$ {
			# Pass php requests to the php-fpm service (fastcgi)
			include fastcgi.conf;
			fastcgi_pass unix:/var/run/php5-fpm.sock;
			
			# Enable cache
			fastcgi_cache ZONE_1;
			fastcgi_cache_valid 200 60m;
			fastcgi_cache_valid 404 10m;
			fastcgi_cache_bypass $no_cache;
			fastcgi_no_cache $no_cache;
		}
		
		location /inspect {
			return 200 "$host\n$uri\n$args\nName: $arg_name";
		}
		
		# Rotate image using dynamic module
		# location = /thumb.png {
			# image_filter rotate 180;
		# }
		
		location = /tolis {
			return 200 "Hello Tolis";
		}
		
		# Buffer size for POST submissions
		client_body_buffer_size 10K;
		client_max_body_size 8m;
		
		# Buffer size for Headers
		client_header_buffer_size 1k;
		
		# Max time to receive client headers/body
		client_header_timeout 12;
		client_body_timeout 12;
		
		# Max time to keep a connection open for
		keepalive_timeout 15;
		
		# Max time for the client accept/receive a response
		send_timeout 10;
		
		# Skip buffering for static files
		sendfile on;
		
		# Optimize sendfile packets
		tcp_nopush on;
		
		# Order of Location blocks
		# 1 Exact match 			= uri
		# 2 Preferential Match	^~ uri
		# 3 REGEX Match			~*
		# 4 Prefix Match			uri
		
		# Exact Match 
		location = /greet {
			return 200 "Hello from NGINX /greet exact location";
		}
	
		# Preferential Prefix match (higher precedence from Regular Expression match)
		location ^~ /Greet[0-9] {
			return 200 "Hello from NGINX Regex cast INsensitive match";
		}
		
		# Regex case sensitive match
		location ~ /greet[0-9] {
			return 200 "Hello from NGINX Regex case sensitive match";
		}
		
		# Regex case insensitive match
		location ~* /Greet[0-9] {
			return 200 "Hello from NGINX Regex cast INsensitive match";
		}
		
		# Prefix Match
		location /greetprefix {
			return 200 "Hello from NGINX /greet prefix location";
		
		}
	
	}
	
	
	# Reverse Proxy Example START #
	
# PHP Listener on specific Port and inde file
# php -S localhost:9999 show_request.php 

#	server {
#		listen 8080;
#		
#		location / {
#			return 200 "Hello from NGINX\n";
#		}
#		
#		
#		location /php {
#		
#			# Header for Reverse Proxied request
#			add_header proxied nginx;
#			
#			# Header for Proxied request
#			proxy_set_header proxied nginx;
#			
#			proxy_pass http://localhost:9999/;  # Dont forget last '/'
#		}
#		
#	}
#	
#	server {
#		listen 443 ssl;
#		server_name 10.10.18.122;
#		
#		ssl_certificate /etc/nginx/ssl/spectra.crt;
#		ssl_certificate_key /etc/nginx/ssl/spectra.key;
#		
#		location /spectra_live {
#		
#			# Header for Reverse Proxied request
#			add_header proxied nginx;
#			
#			# Header for Proxied request
#			proxy_set_header proxied nginx;
#			
#			proxy_pass https://10.10.18.120:8181/SpectraWS/WebSpectraService?wsdl;
#		}
#		
#		
#		# Proxy Remote Site
#		# location /nginxorg {
#			# proxy_pass https://nginx.org/;
#		# }
#	}
	
	# Reverse Proxy Example END #
	
	
	
	# Load Balanding Example START #
#http {
#
#	# Load balancing group
#	upstream php_servers {
#		
#		# Load balancing methods
#		# https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/
#		# 1.
#		ip_hash; 		# Sticky Sessions - Create and maintain a memory of IP addresses and proxy requests
#		
#		# 2.
#		# least_conn;	#  A request is sent to the server with the least number of active connections, again with server weights taken into consideration:
#		
#		server localhost:10001;
#		server localhost:10002;
#		server localhost:10003;
#		
#	}
#
#	server {
#	
#		listen 8888;
#		
#		location / {
#			proxy_pass http://php_servers/;
#		
#		}
#	}
#	
#}
	# Load Balanding Example END #
}
